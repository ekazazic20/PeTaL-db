Description: PeTal DynamoDB table and REST API
Parameters:
  AmazonDynamoDBReadOnlyAccessArn:
    Type: String
    Description: ARN for AmazonDynamoDBReadOnlyAccess Policy
  AmazonAPIGatewayPushToCloudWatchLogsArn:
    Type: String
    Description: ARN for AmazonDynamoDBReadOnlyAccess Policy
  GccTenantOperatorBoundaryArn:
    Type: String
    Description: ARN for gcc-tenantOperatorBoundary Policy
  APIVersion:
    Type: String
    Description: To publish a new version of the API, enter an integer value.
  Environment:
    Type: String
    AllowedValues:
      - br
      - test
    Description: br, test, or empty for prod.
Resources:
  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PetalLabels
      AttributeDefinitions:
        -
          AttributeName: "Level2"
          AttributeType: "S"
        -
          AttributeName: "Level3"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "Level2"
          KeyType: "HASH"
        -
          AttributeName: "Level3"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25
  myRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Description: Allows API Gateway read data from dynamodb table
      ManagedPolicyArns: 
        - !Ref AmazonDynamoDBReadOnlyAccessArn
        - !Ref AmazonAPIGatewayPushToCloudWatchLogsArn
      PermissionsBoundary:
        Ref: GccTenantOperatorBoundaryArn
  myRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      MinimumCompressionSize: 860
      EndpointConfiguration: 
        Types:
        - EDGE
      Name: !Sub '${Environment}PetalApi'
  myRestApiDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: API
      RestApiId: !Ref myRestApi
      Properties: '{"description": "REST API used by the PeTaL React app, to retreive data from a DynamoDB table."}'
  myResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: myRestApi
      ParentId:
        Fn::GetAtt:
        - myRestApi
        - RootResourceId
      PathPart: getarticles
  myResourceDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: RESOURCE
        Path: /getarticles
      RestApiId: !Ref myRestApi
      Properties: '{"description": "/getarticles resource"}'
  myRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      RestApiId:
        Ref: myRestApi
      ValidateRequestBody: false
      ValidateRequestParameters: true
  myGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId:
        Ref: myResource
      RestApiId:
        Ref: myRestApi
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
      RequestParameters:
        method.request.querystring.level2: true
        method.request.querystring.level3: false
      RequestValidatorId:
        Ref: myRequestValidator
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: !GetAtt myRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        RequestParameters:
          integration.request.querystring.level2: method.request.querystring.level2
          integration.request.querystring.level3: method.request.querystring.level3
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json: |
            #*
              VTL mapping template for API Gateway integration request
              Help articles:
              https://www.alexdebrie.com/posts/api-gateway-elements/#writing-mapping-templates-with-vtl
              https://velocity.apache.org/engine/2.1/vtl-reference.html#comments
              https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html
              https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            *#

            #set($sanitizedLevel2 = $util.escapeJavaScript($input.params('level2')))
            #set($sanitizedLevel3 = $util.escapeJavaScript($input.params('level3')))
            #set($keyConditionExpression = "Level2 = :v1")

            ## https://stackoverflow.com/a/13629499 **
            #if("$!sanitizedLevel3" != "")
            #set($keyConditionExpression = "$keyConditionExpression AND Level3 = :v2")
            #end

            {
              "TableName": "PetalLabels",
              "KeyConditionExpression": "$keyConditionExpression",
              "ExpressionAttributeValues": {
                ":v1": {
                  "S": "$sanitizedLevel2"
                }
            #if("$!input.params('level3')" != "")
                ,
                ":v2": {
                  "S": "$sanitizedLevel3"
                }
            #end
              }
            }
  myGetDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Path: /getarticles
      RestApiId: !Ref myRestApi
      Properties: '{"description": "Retreive a list of articles matching the level2 and level3 labels supplied.","tags":["API methods"]}'
  myQPDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: /getarticles
        Method: GET
        Name: level2
      RestApiId: !Ref myRestApi
      Properties: '{"description": "The second level label to retreive articles for."}'
  myQP2DocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: /getarticles
        Method: GET
        Name: level3
      RestApiId: !Ref myRestApi
      Properties: '{"description": "The third level label to retreive articles for."}'
  myResponseDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: RESPONSE
        Path: /getarticles
        Method: GET
        StatusCode: 200
      RestApiId: !Ref myRestApi
      Properties: '{"description": "Returns a list of articles matching the level2 and level3 labels supplied."}'
  myResource2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: myRestApi
      ParentId:
        Fn::GetAtt:
        - myRestApi
        - RootResourceId
      PathPart: getallarticles
  myResource2DocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: RESOURCE
        Path: /getallarticles
      RestApiId: !Ref myRestApi
      Properties: '{"description": "/getallarticles resource"}'
  myGet2:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId:
        Ref: myResource2
      RestApiId:
        Ref: myRestApi
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
        ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: !GetAtt myRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: |
            ## https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html **
            {
              "TableName": "PetalLabels"
            }
  myGet2DocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Path: /getallarticles
      RestApiId: !Ref myRestApi
      Properties: '{"description": "Retreive a list of all articles.","tags":["API methods"]}'
  myResponseDocumentationPart2:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: RESPONSE
        Path: /getallarticles
        Method: GET
        StatusCode: 200
      RestApiId: !Ref myRestApi
      Properties: '{"description": "Returns a list of all articles."}'
  myRestApiDocumentationVersion:
    Type: AWS::ApiGateway::DocumentationVersion
    Properties:
      DocumentationVersion: !Ref APIVersion
      RestApiId: !Ref myRestApi
    DependsOn: myRestApiDocumentationPart
  myRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref myRestApi
      Description: My deployment
    DependsOn: myGet
    DeletionPolicy: Retain
  myRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref myRestApiDeployment
      DocumentationVersion: !Ref APIVersion
      RestApiId: !Ref myRestApi
      StageName: !Sub 'v${APIVersion}'
    DependsOn: myRestApiDocumentationVersion