# Consider adopting resource naming conventions like these: 
#
#https://confluence.huit.harvard.edu/display/CLA/Cloud+Resource+Naming+Conventions?desktop=true&macroName=livesearch

Description: PeTal DynamoDB table and REST API
Parameters:
  GccTenantOperatorBoundaryArn:
    Type: String
    Description: ARN for gcc-tenantOperatorBoundary Policy
  APIVersion:
    Type: Number
    MinValue: 1
    Default: 1
    Description: (For Change Sets) To publish a new version of the API to a separate stage, add 1 to the integer below.
  APIDocVersion:
    Type: Number
    MinValue: 1
    Default: 1
    Description: (For Change Sets) To publish a new version of the API documentation, add 1 to the integer below.
  Environment:
    Type: String
    AllowedValues:
      - br
      - test
    Description: br, test, or empty for prod.
Resources:

  ##############
  #  DynamoDB  #
  ##############

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PetalLabels
      AttributeDefinitions:
        -
          AttributeName: "Level2"
          AttributeType: "S"
        -
          AttributeName: "Level3"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "Level2"
          KeyType: "HASH"
        -
          AttributeName: "Level3"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25

  #################
  #  API Gateway  #
  #################

  myRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Description: Allows API Gateway read data from dynamodb table
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      PermissionsBoundary:
        Ref: GccTenantOperatorBoundaryArn
  myRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      MinimumCompressionSize: 860
      EndpointConfiguration: 
        Types:
        - EDGE
      Name: !Sub '${Environment}PetalApi'
  myRestApiDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: API
      RestApiId: !Ref myRestApi
      # Currently these values are overwritten when exporting the Swagger or OpenAPI spec from API Gateway.
      # They need to be updated manually in the exported yaml file.
      # Also remove the slash in servers:variables:basePath:default in the yaml file.
      Properties: !Sub '{"info": {"title":"PeTaL API Documentation","version":"v${APIDocVersion}"}}'
  myResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: myRestApi
      ParentId:
        Fn::GetAtt:
        - myRestApi
        - RootResourceId
      PathPart: getarticles
  myRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      RestApiId:
        Ref: myRestApi
      ValidateRequestBody: false
      ValidateRequestParameters: true
  myGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId:
        Ref: myResource
      RestApiId:
        Ref: myRestApi
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
      RequestParameters:
        method.request.querystring.level2: true
        method.request.querystring.level3: false
      RequestValidatorId:
        Ref: myRequestValidator
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: !GetAtt myRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        RequestParameters:
          integration.request.querystring.level2: method.request.querystring.level2
          integration.request.querystring.level3: method.request.querystring.level3
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json: |
            #*
              VTL mapping template for API Gateway integration request
              Help articles:
              https://www.alexdebrie.com/posts/api-gateway-elements/#writing-mapping-templates-with-vtl
              https://velocity.apache.org/engine/2.1/vtl-reference.html#comments
              https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html
              https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            *#

            #set($sanitizedLevel2 = $util.escapeJavaScript($input.params('level2')))
            #set($sanitizedLevel3 = $util.escapeJavaScript($input.params('level3')))
            #set($keyConditionExpression = "Level2 = :v1")

            ## https://stackoverflow.com/a/13629499 **
            #if("$!sanitizedLevel3" != "")
            #set($keyConditionExpression = "$keyConditionExpression AND Level3 = :v2")
            #end

            {
              "TableName": "PetalLabels",
              "KeyConditionExpression": "$keyConditionExpression",
              "ExpressionAttributeValues": {
                ":v1": {
                  "S": "$sanitizedLevel2"
                }
            #if("$!input.params('level3')" != "")
                ,
                ":v2": {
                  "S": "$sanitizedLevel3"
                }
            #end
              }
            }
  myGetDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Path: /getarticles
      RestApiId: !Ref myRestApi
      Properties: '{"summary": "Finds articles by label","description": "Find articles with the level2 and level3 labels supplied.","tags":["API methods"]}'
  myQPDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: /getarticles
        Method: GET
        Name: level2
      RestApiId: !Ref myRestApi
      Properties: '{"description": "The second level label to retreive articles for."}'
  myQP2DocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: /getarticles
        Method: GET
        Name: level3
      RestApiId: !Ref myRestApi
      Properties: '{"description": "The third level label to retreive articles for."}'
  myResponseDocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: RESPONSE
        Path: /getarticles
        Method: GET
        StatusCode: 200
      RestApiId: !Ref myRestApi
      Properties: '{"description": "successful operation"}'
  myResource2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: myRestApi
      ParentId:
        Fn::GetAtt:
        - myRestApi
        - RootResourceId
      PathPart: getallarticles
  myGet2:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId:
        Ref: myResource2
      RestApiId:
        Ref: myRestApi
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
        ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: !GetAtt myRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: |
            ## https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html **
            {
              "TableName": "PetalLabels"
            }
  myGet2DocumentationPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Path: /getallarticles
      RestApiId: !Ref myRestApi
      Properties: '{"summary": "Get all articles","tags":["API methods"]}'
  myResponseDocumentationPart2:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: RESPONSE
        Path: /getallarticles
        Method: GET
        StatusCode: 200
      RestApiId: !Ref myRestApi
      Properties: '{"description": "successful operation"}'
  myRestApiDocumentationVersion:
    Type: AWS::ApiGateway::DocumentationVersion
    Properties:
      DocumentationVersion: !Ref APIDocVersion
      RestApiId: !Ref myRestApi
    DependsOn: myRestApiDocumentationPart
  myRestApiDeployment: #to create a new API deployment in the same stage, change the resource id to something unique ex. "myRestApiDeployment2", and update the !Ref to match the new id in the stage definition below.
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref myRestApi
      Description: My deployment
    DependsOn: myGet
    DeletionPolicy: Retain
  myRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref myRestApiDeployment #make sure this matches the resourceID of the deployment above.
      DocumentationVersion: !Ref APIDocVersion
      RestApiId: !Ref myRestApi
      StageName: !Sub 'v${APIVersion}'
    DependsOn: myRestApiDocumentationVersion

  ############
  #  Lambda  #
  ############

  myLambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: petal-lambda-dynamodb
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Scan'
              - 'dynamodb:Query'
              - 'dynamodb:UpdateItem'
            Resource: !GetAtt myDynamoDBTable.Arn
  myLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Description: Allows Lambda functions to call AWS services on your behalf.
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref myLambdaPolicy
      PermissionsBoundary:
        Ref: GccTenantOperatorBoundaryArn
  labelCOREArticles:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3

          #functions: check for new articles, deploy endpoint, batch predictions, store predictions
          # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.Python.04.html
          # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.scan
          # https://www.fernandomc.com/posts/ten-examples-of-getting-data-from-dynamodb-with-python-and-boto3/

          def connectToDBTable():
              dynamodb = boto3.resource('dynamodb', region_name="us-east-2")
              return dynamodb.Table('PetalLabels')
              
          def storeLabelledArticles(labelledArticles, dbTable):
              # https://boto3.amazonaws.com/v1/documentation/api/latest/guide/dynamodb.html#batch-writing
              with dbTable.batch_writer() as batch:
                  for article in labelledArticles:
                      batch.delete_item(Key={'Level2': article['Level2'], 'Level3': article['Level3']})
              with dbTable.batch_writer() as batch:
                  for article in labelledArticles:
                      batch.put_item(
                          Item={
                              'Level2': article['Level2'],
                              'Level3': article['Level3'],
                              'CoreId': article['CoreId']
                          }
                      )

          def handler(event, context):
              dbTable = connectToDBTable()
              #endpoint = deployEndpoint()
              #labelledArticles = batchPredictions(newArticles, endpoint)
              labelledArticles = [{'Level2': 'Protect from living threats', 'Level3': 'Protect from fungi', 'CoreId': '74791'}, {'Level2': 'Protect from living threats', 'Level3': 'Protect from microbes', 'CoreId': '15626437'}]
              storeLabelledArticles(labelledArticles, dbTable)
      Description: 'Takes unprocessed CORE articles, labels them with biomimetic functions using a deployed SageMaker endpoint, and saves the labelled articles to DynamoDB.'
      Role: !GetAtt myLambdaRole.Arn

  ################################################
  #  Run Lambda on a schedule using EventBridge  #
  ################################################

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html#aws-resource-events-rule--examples
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Runs the PeTaL labeller Lambda function on a schedule"
      ScheduleExpression: "rate(30 days)"
      State: "DISABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "labelCOREArticles"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "labelCOREArticles"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
